// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.3
// source: encounters/encounters-service.proto

package encounters

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EncountersService_GetAllSocialEncounters_FullMethodName  = "/encounters.EncountersService/GetAllSocialEncounters"
	EncountersService_PostSocialEncounter_FullMethodName     = "/encounters.EncountersService/PostSocialEncounter"
	EncountersService_ActivateSocialEncounter_FullMethodName = "/encounters.EncountersService/ActivateSocialEncounter"
)

// EncountersServiceClient is the client API for EncountersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncountersServiceClient interface {
	GetAllSocialEncounters(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SocialEncountersResponse, error)
	PostSocialEncounter(ctx context.Context, in *SocialEncounterResponse, opts ...grpc.CallOption) (*SocialEncounterResponse, error)
	ActivateSocialEncounter(ctx context.Context, in *ActivateSocialEncounterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type encountersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncountersServiceClient(cc grpc.ClientConnInterface) EncountersServiceClient {
	return &encountersServiceClient{cc}
}

func (c *encountersServiceClient) GetAllSocialEncounters(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SocialEncountersResponse, error) {
	out := new(SocialEncountersResponse)
	err := c.cc.Invoke(ctx, EncountersService_GetAllSocialEncounters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersServiceClient) PostSocialEncounter(ctx context.Context, in *SocialEncounterResponse, opts ...grpc.CallOption) (*SocialEncounterResponse, error) {
	out := new(SocialEncounterResponse)
	err := c.cc.Invoke(ctx, EncountersService_PostSocialEncounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersServiceClient) ActivateSocialEncounter(ctx context.Context, in *ActivateSocialEncounterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, EncountersService_ActivateSocialEncounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncountersServiceServer is the server API for EncountersService service.
// All implementations must embed UnimplementedEncountersServiceServer
// for forward compatibility
type EncountersServiceServer interface {
	GetAllSocialEncounters(context.Context, *EmptyRequest) (*SocialEncountersResponse, error)
	PostSocialEncounter(context.Context, *SocialEncounterResponse) (*SocialEncounterResponse, error)
	ActivateSocialEncounter(context.Context, *ActivateSocialEncounterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedEncountersServiceServer()
}

// UnimplementedEncountersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncountersServiceServer struct {
}

func (UnimplementedEncountersServiceServer) GetAllSocialEncounters(context.Context, *EmptyRequest) (*SocialEncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSocialEncounters not implemented")
}
func (UnimplementedEncountersServiceServer) PostSocialEncounter(context.Context, *SocialEncounterResponse) (*SocialEncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSocialEncounter not implemented")
}
func (UnimplementedEncountersServiceServer) ActivateSocialEncounter(context.Context, *ActivateSocialEncounterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSocialEncounter not implemented")
}
func (UnimplementedEncountersServiceServer) mustEmbedUnimplementedEncountersServiceServer() {}

// UnsafeEncountersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncountersServiceServer will
// result in compilation errors.
type UnsafeEncountersServiceServer interface {
	mustEmbedUnimplementedEncountersServiceServer()
}

func RegisterEncountersServiceServer(s grpc.ServiceRegistrar, srv EncountersServiceServer) {
	s.RegisterService(&EncountersService_ServiceDesc, srv)
}

func _EncountersService_GetAllSocialEncounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServiceServer).GetAllSocialEncounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncountersService_GetAllSocialEncounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServiceServer).GetAllSocialEncounters(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncountersService_PostSocialEncounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialEncounterResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServiceServer).PostSocialEncounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncountersService_PostSocialEncounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServiceServer).PostSocialEncounter(ctx, req.(*SocialEncounterResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncountersService_ActivateSocialEncounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSocialEncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServiceServer).ActivateSocialEncounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncountersService_ActivateSocialEncounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServiceServer).ActivateSocialEncounter(ctx, req.(*ActivateSocialEncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncountersService_ServiceDesc is the grpc.ServiceDesc for EncountersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncountersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encounters.EncountersService",
	HandlerType: (*EncountersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSocialEncounters",
			Handler:    _EncountersService_GetAllSocialEncounters_Handler,
		},
		{
			MethodName: "PostSocialEncounter",
			Handler:    _EncountersService_PostSocialEncounter_Handler,
		},
		{
			MethodName: "ActivateSocialEncounter",
			Handler:    _EncountersService_ActivateSocialEncounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encounters/encounters-service.proto",
}
